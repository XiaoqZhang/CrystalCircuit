% SOD_IM_x 
nodes = 1:112 
edges = [ 
1 2; 
1 3; 
1 4; 
2 5; 
2 6; 
3 5; 
3 23; 
4 10; 
4 27; 
5 18; 
6 7; 
6 13; 
7 8; 
7 9; 
7 10; 
8 14; 
8 15; 
9 65; 
9 11; 
10 11; 
10 12; 
11 53; 
12 57; 
12 58; 
13 8; 
14 74; 
14 44; 
15 57; 
15 74; 
16 17; 
16 13; 
16 19; 
17 53; 
18 16; 
18 20; 
19 28; 
19 33; 
20 21; 
20 19; 
20 22; 
21 61; 
22 25; 
23 22; 
23 32; 
24 22; 
24 21; 
24 35; 
25 30; 
25 41; 
26 4; 
27 12; 
27 60; 
28 29; 
28 15; 
28 30; 
29 70; 
29 79; 
30 57; 
30 43; 
31 23; 
31 36; 
31 37; 
32 25; 
32 27; 
32 40; 
33 29; 
34 24; 
34 45; 
35 42; 
35 48; 
36 34; 
37 38; 
37 39; 
38 36; 
38 6; 
39 40; 
39 9; 
40 60; 
40 65; 
41 43; 
41 44; 
42 41; 
42 47; 
42 14; 
43 80; 
43 86; 
44 69; 
45 13; 
45 17; 
45 35; 
46 39; 
47 81; 
47 88; 
48 47; 
49 50; 
49 51; 
49 18; 
50 26; 
50 52; 
51 26; 
51 59; 
52 17; 
52 11; 
53 54; 
53 55; 
54 89; 
54 48; 
55 89; 
55 33; 
56 52; 
56 46; 
57 62; 
58 62; 
58 55; 
58 63; 
59 60; 
59 21; 
60 61; 
61 63; 
61 68; 
62 78; 
62 84; 
63 33; 
63 93; 
64 59; 
64 46; 
65 44; 
65 67; 
66 64; 
66 56; 
66 34; 
67 69; 
67 68; 
67 54; 
68 93; 
68 48; 
69 87; 
69 77; 
70 71; 
70 72; 
70 73; 
71 90; 
72 76; 
73 103; 
73 109; 
74 75; 
74 72; 
75 76; 
75 77; 
75 78; 
76 98; 
76 102; 
77 96; 
77 91; 
78 91; 
78 92; 
79 73; 
79 80; 
79 83; 
80 82; 
81 80; 
81 83; 
81 85; 
82 99; 
82 100; 
83 95; 
84 92; 
84 94; 
85 106; 
85 110; 
86 82; 
86 84; 
86 87; 
87 94; 
87 96; 
88 85; 
88 71; 
88 72; 
89 71; 
89 91; 
90 104; 
90 108; 
91 90; 
92 97; 
92 111; 
93 94; 
93 83; 
94 95; 
95 105; 
95 107; 
96 101; 
96 112; 
] 

G = digraph(edges(:, 1), edges(:,2))
weights = [ 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
1, 
] 

G.Edges.Weight = weights

startnode = [1, 2, 3, 31, 37, 38, 49, 50, 51, 66, 64, 56, 5, 36, 26, 46] 
endnode = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112] 

positions = [ 
[33.350693754897854 12.48050640039704 8.371292714107557] 
[33.32648261202102 8.325328205831072 4.206367903649266] 
[33.32712165738693 8.318008651000385 12.527434314556585] 
[37.51953426358499 16.63169211050991 8.390600327774791] 
[33.304573945040765 4.162497749396657 8.3648397899536] 
[37.48678527741817 8.328322569170899 33.32813134539886] 
[41.65795385754696 12.47884286520825 0.0694379691681028] 
[45.811977277473474 8.314016166547283 0.062356750038013546] 
[41.67953081348946 16.642006028680424 29.190299279153262] 
[41.683165008878966 16.63435376681198 4.2320348180606695] 
[41.70274438558209 20.797516930284143 33.35588949482865] 
[45.841837152303384 16.646663927209044 8.39489910824846] 
[41.64180748696437 4.163495870509933 33.32204936787737] 
[49.97461776499612 8.31900677211366 29.182129666495094] 
[49.97231407026405 8.326326326944347 4.22089622290679] 
[41.620234187528304 0.0013308281510340204 4.19919340836926] 
[41.71689683343173 29.113862046095743 0.1062735533792578] 
[37.57880895050753 33.26637858435965 8.427435505696456] 
[45.77956487768631 0.011644746321547673 8.360057358675334] 
[41.61825732849207 0.006986847792928606 12.517289561188726] 
[41.71956149125305 29.114194753133503 16.745443784494523] 
[41.639475759016285 4.1631631634721735 16.682213847298296] 
[37.485453557925254 8.328322569170899 16.689295763254073] 
[41.61990247649055 0.0016635351887925255 20.83836102465875] 
[45.80831504886795 8.314016166547283 16.70251913413985] 
[33.36584377353171 20.796518809170877 8.400676947441077] 
[41.68019667323592 16.642006028680424 12.55113265022565] 
[49.94973954353733 4.163495870509933 8.380365898138727] 
[54.22464406525699 33.2683748265862 8.441965915431037] 
[49.97195432601028 8.31900677211366 12.542960132205522] 
[33.32381551652874 8.324330084717792 20.845530698882637] 
[41.65529163739659 12.479175572246008 16.709601921704213] 
[50.0558011188989 29.116523702397814 8.422656908112433] 
[37.57914675572267 33.267709412510676 25.068269743535392] 
[45.778233158193395 0.011644746321547673 24.99988898653055] 
[33.303239787876876 4.16183233532114 25.00467002415744] 
[33.349030324367185 12.480839107434802 25.01012637825226] 
[33.32745824376659 8.31900677211366 29.166603905569843] 
[37.51820254409206 16.63169211050991 25.031430325629998] 
[41.681840602398914 16.63635000903852 20.872203416869993] 
[49.96997624813858 8.324330084717792 20.861055588199303] 
[49.94907124611992 4.162830456434416 25.019198343414963] 
[54.131277703155405 8.327324448057624 16.704818271557485] 
[49.99519105597702 12.480839107434802 25.025651267568925] 
[41.616589022619486 0.005988726679653091 29.157451598030686] 
[33.365182789127154 20.797849637321914 25.038515203671427] 
[54.224978213965684 33.26870753362396 25.081799692792917] 
[50.05513647798791 29.11685640943557 25.060493073865725] 
[33.40963673078264 29.11552558128454 8.406131558318712] 
[33.38542193139936 24.959349265605294 4.241204657383366] 
[33.38706220405592 24.952695124850123 12.563271703550651] 
[37.54705509745395 24.96201092190736 33.363966934452066] 
[45.87092025335825 24.94903534743477 0.09819396424916856] 
[50.03455953050058 24.954025953001146 29.21796775231485] 
[50.0312570461488 24.961345507831833 4.256733437117943] 
[33.38839514238432 24.95302783188788 29.203439142521127] 
[49.99585935339443 12.481504521510317 8.386818822292685] 
[50.011675231774745 20.797516930284143 8.414206896698602] 
[37.54739534034005 24.964007164133914 16.72314024594237] 
[41.70141510376013 20.79818234435967 16.716056936335228] 
[45.87125318323148 24.94903534743477 16.73736146478537] 
[54.165698651701256 16.632690231623183 8.406127307568513] 
[50.03389245191864 24.953693245963393 12.577800894416765] 
[33.38676096390515 24.961345507831833 20.88037721048227] 
[45.84117129255693 16.646663927209044 25.032734577176065] 
[33.41030380936457 29.115858288322297 25.046963996216792] 
[50.01200938048344 20.797849637321914 25.054040674060484] 
[50.03291803900853 24.960347386718567 20.895900009321878] 
[54.16502913544834 16.63169211050991 25.044959056019067] 
[58.266394919138136 0.0013308281510340204 4.212721557685926] 
[58.36505880078737 29.114860167209017 0.11980553639016037] 
[58.28896335168744 4.162497749396657 33.33557629832556] 
[62.42672439891582 0.011644746321547673 8.37358637960059] 
[54.133943579812204 8.327989862133135 33.343656409498436] 
[58.30411458915679 12.47884286520825 0.08396448848476779] 
[62.45780507921006 8.314016166547283 0.07688297881848147] 
[58.32569520160573 16.643004149793697 29.204827888946983] 
[58.32833060737554 16.635351887925253 4.246562556245798] 
[58.265083919848365 0.006986847792928606 12.529819921577785] 
[58.28629869386614 4.162165042358896 16.6957404872103] 
[58.26572540288524 0.0003327070377585051 20.852884466136477] 
[62.45547457009745 8.314016166547283 16.715049785065105] 
[58.364394159876404 29.11519287424677 16.757974492143454] 
[58.326028131478964 16.643004149793697 12.565660969483178] 
[62.42505609304324 0.010646625208272163 25.012417256442546] 
[58.30145236900641 12.479175572246008 16.723130071020876] 
[58.32666595800939 16.635351887925253 20.885728313564815] 
[58.26341927048222 0.006986847792928606 29.1699840488968] 
[54.19289386870986 24.965005285247187 0.10049780466369522] 
[62.51708098496808 24.94903534743477 0.11172211356583353] 
[58.346911194458976 20.798515051397427 33.37041636140518] 
[62.48766129753354 16.645665806095767 8.408424876551873] 
[54.19455486156957 24.964007164133914 16.73866600686763] 
[58.348574624989645 20.79818234435967 16.730584327260484] 
[62.517417571347735 24.950033468548053 16.751890074579087] 
[62.48699909429352 16.646663927209044 25.047260805956526] 
[66.64368107786396 12.48050640039704 8.400346333813282] 
[66.61946993498714 8.325328205831072 4.23542152335499] 
[66.62010898035304 8.318008651000385 12.55648793426231] 
[66.61680283949485 8.324330084717792 20.87458431858836] 
[66.64201764733329 12.480839107434802 25.039179997957984] 
[66.6204455667327 8.31900677211366 29.195657525275568] 
[66.70262405374875 29.11552558128454 8.435185178024437] 
[66.67840925436546 24.959349265605294 4.27025827708909] 
[66.68004952702204 24.952695124850123 12.592325323256375] 
[66.70329113233068 29.115858288322297 25.076017615922517] 
[66.67974828687124 24.961345507831833 20.909430830187993] 
[66.68138246535044 24.95302783188788 29.23249276222685] 
[66.59756126800687 4.162497749396657 8.393893409659324] 
[66.596227110843 4.16183233532114 25.033723643863166] 
[66.6588310964978 20.796518809170877 8.429730567146802] 
[66.65817011209326 20.797849637321914 25.06756882337715] 
] 


 % create a simulink model 
sys = 'SOD_IM_x' 
new_system(sys) 
open_system(sys) 

% add network blocks 
blocknames = {} 
for i = 1:height(G.Edges) 
    node1 = G.Edges.EndNodes(i, 1) 
    node2 = G.Edges.EndNodes(i, 2) 
    resistance = G.Edges.Weight(i) 

    blockname = sprintf('R_%d_%d', node1, node2) 
    blocknames{end+1} = blockname 
    add_block('fl_lib/Electrical/Electrical Elements/Resistor', [sys '/' blockname]) 
    set_param([sys '/' blockname], 'R', num2str(resistance)) 
    xpos = ((positions(node1, 1) + positions(node2, 1)) * 1000 + positions(node1, 3) * 100)
    ypos = ((positions(node1, 2) + positions(node2, 2)) * 1000 + positions(node1, 3) * 100)
    set_param([sys '/' blockname], 'Position', [xpos, ypos, xpos+200, ypos+80]) 
end 

% connect the blocks 
for i = 1:length(blocknames) 
    for j = i+1:length(blocknames) 
        blockname1 = blocknames{i} 
        blockname2 = blocknames{j} 
        block1 = split(blockname1, '_') 
        block2 = split(blockname2, '_') 
        block1_x = str2num(block1{2}) 
        block1_y = str2num(block1{3}) 
        block2_x = str2num(block2{2}) 
        block2_y = str2num(block2{3}) 

        if block1_x == block2_x 
            if get_param([sys '/' blockname1], 'LineHandles').LConn == -1 || get_param([sys '/' blockname2], 'LineHandles').LConn == -1 
                 add_line(sys, [blockname1 '/LConn 1'], [blockname2 '/LConn 1']) 
            end 
        end 

        if block1_y == block2_y 
            if get_param([sys '/' blockname1], 'LineHandles').RConn == -1 || get_param([sys '/' blockname2], 'LineHandles').RConn == -1 
                 add_line(sys, [blockname1 '/RConn 1'], [blockname2 '/RConn 1']) 
            end 
        end 

        if block1_x == block2_y 
            if get_param([sys '/' blockname1], 'LineHandles').LConn == -1 || get_param([sys '/' blockname2], 'LineHandles').RConn == -1 
                 add_line(sys, [blockname1 '/LConn 1'], [blockname2 '/RConn 1']) 
            end 
        end 

        if block1_y == block2_x 
            if get_param([sys '/' blockname1], 'LineHandles').RConn == -1 || get_param([sys '/' blockname2], 'LineHandles').LConn == -1 
                 add_line(sys, [blockname1 '/RConn 1'], [blockname2 '/LConn 1']) 
            end 
        end 

         if ismember(block1_x, startnode) && ismember(block2_x, startnode) 
             startpoint = blockname1 
             if get_param([sys '/' blockname1], 'LineHandles').LConn == -1 || get_param([sys '/' blockname2], 'LineHandles').LConn == -1 
                 add_line(sys, [blockname1 '/LConn 1'], [blockname2 '/LConn 1']) 
             end 
         end 

         if ismember(block1_y, endnode) && ismember(block2_y, endnode) 
             endpoint = blockname1 
             if get_param([sys '/' blockname1], 'LineHandles').RConn == -1 || get_param([sys '/' blockname2], 'LineHandles').RConn == -1 
                 add_line(sys, [blockname1 '/RConn 1'], [blockname2 '/RConn 1']) 
             end 
         end 

     end 
end 
% add basic blocks 
add_block('fl_lib/Electrical/Electrical Sources/DC Voltage Source', [sys '/V']) 
set_param([sys '/V'], 'v0', '1000') 
set_param([sys '/V'], 'Position', [0, 100, 100, 200]) 

add_block('nesl_utility/Solver Configuration', [sys '/Solver']) 
set_param([sys '/Solver'], 'Position', [-100, 200, 0, 250]) 
add_block('ee_lib/Connectors & References/Electrical Reference', [sys '/Reference']) 
set_param([sys '/Reference'], 'Position', [0, 300, 50, 350]) 

add_line(sys, 'V/RConn 1', 'Solver/RConn 1') 
add_line(sys, 'V/RConn 1', 'Reference/LConn 1') 

add_block('fl_lib/Electrical/Electrical Sensors/Current Sensor', [sys '/Current Sensor']) 
set_param([sys '/Current Sensor'], 'Position', [200, 0, 300, 100]) 
add_block('nesl_utility/PS-Simulink Converter', [sys '/Converter']) 
set_param([sys '/Converter'], 'Position', [350, 0, 400, 50]) 
add_block('simulink/Sinks/Display', [sys '/Display']) 
set_param([sys '/Display'], 'Position', [450, 0, 550, 100]) 

add_line(sys, 'V/LConn 1', 'Current Sensor/LConn 1') 
add_line(sys, 'Current Sensor/RConn 1', 'Converter/LConn 1') 
add_line(sys, 'Converter/1', 'Display/1') 

% connect the basic blocks with the network 
add_line(sys, [startpoint '/LConn 1'], 'Current Sensor/RConn 2') 
add_line(sys, [endpoint '/RConn 1'], 'V/RConn 1') 

sim(sys) 
save_system(sys, 'SOD_IM_x_sim') 
